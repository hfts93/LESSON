ТЕХНОЛОГИЯ РАЗРАБОТКИ ПРОГРАММНОГО
ОБЕСПЕЧЕНИЯ


Технология разработки программного обеспечения (ТРПО) –
это совокупность процессов и методов создания программного продукта.
Технология разработки программного обеспечения – это
система инженерных принципов для создания экономичного ПО,
которое надежно и эффективно работает в реальных компьютерах. 

Технология разработки программного обеспечения – это
система инженерных принципов для создания экономичного ПО с
заданными характеристиками качества.



Под методологией понимается система принципов и способов
организации процесса разработки программ. Цель методологии
разработки ПО – внедрение методов разработки программ,
обеспечивающих достижение соответствующих характеристик качества


Тема 1
КРАТКИЕ ТЕОРЕТИЧЕСКИЕ АСПЕКТЫ КУРСА
«ТЕХНОЛОГИЯ РАЗРАБОТКИ ПРОГРАММНОГО
ОБЕСПЕЧЕНИЯ»
Термин «технология» – он подчеркивает аналогию между созданием
программного продукта и промышленным производством

Формула
разработка = анализ + проектирование + программирование
(кодирование) + тестирование + отладка



Средства для создания приложений – локальные средства,
обеспечивающие выполнение отдельных видов работ по созданию
программ, делятся на:
 языки и системы программирования;
 инструментальная среда пользователя.
Язык программирования – формализованный язык для описания
алгоритма решения задачи на компьютере. Они делятся на классы:
 машинные языки – языки программирования, воспринимаемые
аппаратной частью компьютера (машинные коды);
 машинно-ориентированные языки – языки программирования,
которые отражают структуру конкретного типа компьютера
(ассемблеры);
 алгоритмические языки – не зависящие от архитектуры
компьютера языки программирования для отражения структуры
алгоритма (Паскаль, бейсик, Фортран и др.);
 процедурно–ориентированные языки – языки программирования,
где имеется возможность описания программы как совокупности
процедур (подпрограмм).
 проблемно–ориентированные языки – предназначены для решения
задач определенного класса (Lisp);

Компилятор транслирует всю программу без ее выполнения.
Трансляторы (интерпретаторы) выполняют пооперационную обработку
и выполнение программы. Отладчики – специальные программы,
предназначенные для трассировки и анализа выполнения других
программ. Трассировка – это обеспечение выполнения в пооператорном
варианте.
Инструментальная среда пользователя – это специальные средства,
встроенные в пакеты прикладных программ, такие, как:
 библиотека функций, процедур, объектов и методов обработки;
 макрокоманды;
 клавишные макросы;
 языковые макросы;
 конструкторы экранных форм и объектов;
 генераторы приложений;
 языки запросов высокого уровня;
 конструкторы меню и др

1.5.2. Средства для создания информационных систем (Case–
технология)


Вопросы и задания для самоконтроля
1. Что такое технология разработки ПО?
2. Что явилось предпосылкой становления дисциплины
«Технология разработки ПО»? Что явилось причиной стремительного
развития ПО?
3. Чем отличаются программа и программное обеспечение?
4. Достаточно ли при работе над проектом большой программной
системы быть компетентным в области вычислительной техники и
программировании. Почему?
5. Может ли большая программная система быть отлажена до конца
и почему?
6. При каких условиях созданный программный комплекс может
быть назван программным продуктом?
7. Что такое системное программное обеспечение?
8. Что такое инструментарий технологии программирования?


Тема 2
ЖИЗНЕННЫЙ ЦИКЛ ПРОГРАММНОГО
ОБЕСПЕЧЕНИЯ

 Каждый процесс (процесс – совокупность взаимосвязанных
действий, преобразующий некоторые входные данные в выходные)
разделен на набор действий, каждое действие – на набор задач. В
соответствии с ГОСТ Р ИСО/МЭК 12207-2010 различные виды
деятельности, которые могут выполняться в течение жизненного цикла
программных систем в семь групп процессов:
1) процессы соглашения – 2;
2) процессы организационного обеспечения проекта – 5;
3) процессы проекта – 7;
4) технические процессы – 11;
5) процессы реализации программных средств – 7;
6) процессы поддержки программных средств – 8;
7) процессы повторного применения программных средств – 3.


2.1.1. Процесс реализации
При реализации проекта необходимо осуществлять следующие
виды деятельности в соответствии с принятыми в организации
политиками и процедурами в отношении процесса реализации
программных средств:
1) Если не оговорено в контракте, разработчик должен определить
или выбрать модель жизненного цикла, соответствующую области
применения, размерам и сложности проекта. Модель жизненного цикла
должна содержать стадии, цели и выходы каждой стадии. Виды
деятельности и задачи процесса реализации программных средств
должны быть выбраны и отражены в модели жизненного цикла.
Подробно существующие модели и методологии будут рассмотрены во
второй теме текущего документа. Эти виды деятельности и задачи
могут пересекаться или взаимодействовать друг с другом, могут
выполняться итеративно или рекурсивно. В идеальном случае
рассматриваемые виды деятельности и задачи выполняются и решаются
с использованием определенной организационной модели жизненного
цикла.
2) Исполнитель должен:
 документировать результаты в соответствии с процессом
менеджмента программной документации;
 передавать результаты в процесс менеджмента
конфигурации программных средств и выполнять
управление изменениями в соответствии с ним;
 документировать, решать проблемы и снимать
несоответствия, найденные в программных продуктах и
задачах в соответствии с процессом решения проблем в
программных средствах;
17
 выполнять поддержку процессов в соответствии с
контрактом;
 устанавливать базовые линии и соединять элементы
конфигурации в сроки, определенные приобретающей
стороной и поставщиком.
3) Исполнитель должен выбирать, адаптировать и применять те
стандарты, методы, инструментарий и языки программирования (если не
оговорено в контракте), которые документально оформлены, являются
подходящими и установлены организацией для выполнения
деятельности в рамках процесса реализации программных средств и
поддерживающих процессов.
4) Исполнитель должен разрабатывать планы проведения действий
процесса реализации программных средств. Планы должны включать в
себя конкретные стандарты, методы, инструментарий, действия и
обязанности, связанные с разработкой и квалификацией всех требований,
включая безопасность и защиту. При необходимости могут
разрабатываться отдельные планы. Эти планы должны
документироваться и выполняться.
5) При разработке или сопровождении программных продуктов
могут применяться не поставляемые элементы. Однако должно
гарантироваться, что функционирование и сопровождение поставляемых
программных продуктов после поставки приобретающей стороне не
зависит от таких элементов; другими словами, эти элементы следует
также рассматривать как поставляемые.
Результатом процесса является создание программной составной
части, удовлетворяющей как требованиям к архитектурным решениям,
что подтверждается посредством верификации, так и требованиям
правообладателей, что подтверждается посредством валидации.
В результате успешного осуществления процесса реализации
программных средств:
1) определяется стратегия реализации;
2) определяются ограничения по технологии реализации проекта;
3) изготавливается программная составная часть;
4) программная составная часть упаковывается и хранится в
соответствии с соглашением о ее поставке.
Процесс реализации программных средств включает в себя
несколько специальных процессов более низкого уровня:
1) процесс анализа требований к программным средствам;
2) процесс проектирования архитектуры программных средств;
3) процесс детального проектирования программных средств;
4) процесс конструирования программных средств;
18
5) процесс комплексирования программных средств;
6) процесс квалификационного тестирования программных
средств.

2.1.6. Процесс квалификационного тестирования
программного средства
20
Цель процесса квалификационного тестирования программного
средства заключается в подтверждении того, что комплектованный
программный продукт удовлетворяет установленным требованиям. В
рамках процесса исполнитель должен провести квалификационное
тестирование (согласно требованиям). Исполнителю необходимо
провести оценку проекта, кода, тестов и их результаты, а также
пользовательской документации, учитывая следующие критерии:
1) тестовое покрытие требования к программному средству;
2) соответствие с ожидаемыми результатами;
3) осуществимость функционирования и сопровождения.
После успешного тестирования программный продукт готов к
передаче заказчику. После чего в действие вступают процессы
поддержки программного средства [17].


Вопросы и задания для самоконтроля
1. Понятие жизненного цикла ПО. Что понимается под процессом
жизненного цикла? Назовите основные группы процессов
согласно ГОСТ Р ИСО/МЭК 12207-2010.
2. Основная цель процесса анализа требований к программным
средствам. Что является результатом успешного осуществления
процесса?
3. Процесс реализации. Какие виды деятельности и задачи входят в
состав процесса реализации?
4. Процесс проектирования архитектуры программных средств.
Что является результатом успешной реализации процесса. Что
понимается под базовой линией?



Тема 3
МОДЕЛИ И МЕТОДОЛОГИИ РАЗРАБОТКИ
ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ


3.1.3. Итеративный инкрементный подход к разработке
(эволюционная модель)
3.1.3.1 Итеративная модель


Итеративная модель подразумевает возможность не только
сборки работающей (с точки зрения результатов тестирования) версии
системы - прототипа, но и её развертывания в реальных операционных
условиях с анализом откликов пользователей для определения
содержания и планирования следующей итерации. Поскольку на каждом
шаге мы имеем работающую систему, то можно:
 очень рано начать тестирование пользователями;
 принять стратегию разработки в соответствии с бюджетом,
полностью защищающую от перерасхода времени или средств (в
частности, за счет сокращения второстепенной
функциональности).



3.1.3.2 Инкрементная модель

Для организации инкрементной разработки обычно выбирается
характерный временной интервал, например, неделя. Затем в течение
этого интервала происходит обновление проекта: добавляется новая
документация как текстовая, так и графическая, расширяется набор
тестов, добавляются новые программные коды и т. д. Теоретически шаги
разработки могут выполняться и параллельно, но такой процесс очень
сложно скоординировать. Инкрементная разработка проходит лучше
всего, если следующая итерация начинается после того, как обновление
всех артефактов в предыдущей итерации закончено, и существенно хуже,
если время, требуемое на обновление артефактов, значительно
превышает выбранный интервал 

3.2. Методологии разработки ПО
Методологии представляют собой ядро теории управления
разработкой ПО. К существующей классификации в зависимости от
используемой в ней модели жизненного цикла (каскадные и
эволюционные) добавилась более общая классификация на
прогнозируемые и адаптивные методологии.
Прогнозируемые (предикативные) методологии фокусируются на
детальном планировании будущего. Известны запланированные задачи и
ресурсы на весь срок проекта. Команда с трудом реагирует на возможные
изменения. План оптимизирован исходя из состава работ и
существующих требований. Изменение требований может привести к
существенному изменению плана, а также дизайна проекта.
Адаптивные (гибкие) методологии нацелены на преодоление
ожидаемой неполноты требований и их постоянного изменения. Когда
меняются требования, команда разработчиков тоже меняется. Команда,
участвующая в адаптивной разработке, с трудом может предсказать
будущее проекта. Существует точный план лишь на ближайшее время.
Более удаленные во времени планы существуют лишь как декларации о
целях проекта, ожидаемых затратах и результатах. Среди адаптивных
методологий: (Scrum, Crystal, Extreme Programming, Adaptive Software
Development, DSDM, Feature Driven Development, Lean software
development). Рассмотрим самые основные и популярные методологии



3.2.1.1 Архитектура
Можно сказать, что RUP – ориентированная на архитектуру
методология. Считается, что реализация и тестирование архитектуры
системы должны начинаться на самых ранних стадиях проекта.

RUP поощряет использование визуальных средств для анализа и
проектирования. Как правило, используется нотация и, соответственно,
средства моделирования UML (такие как Rational Rose).



3.2.1.2 Жизненный цикл проекта
32
Жизненный цикл проекта RUP состоит из четырех фаз.
Последовательность этих фаз фиксирована, но число итераций,
необходимых для завершения каждой фазы, определяется
индивидуально для каждого конкретного проекта. Фазы RUP нельзя
отождествлять с фазами водопадной модели – их назначение и
содержание принципиально различны.
Начало (Inception)
Стадия «начало» обычно состоит из одной итерации. В ходе
выполнения этой стадии необходимо:
 определить видение и границы проекта;
 создать экономическое обоснование;
 идентифицировать большую часть прецедентов использования и
подробно описать несколько ключевых прецедентов;
 найти хотя бы одно возможное архитектурное решение;
 оценить бюджет, график и риски проекта.
Если после завершения первой итерации заинтересованные лица
приходят к выводу о целесообразности выполнения проекта, проект
переходит в следующую стадию. В противном случае проект может быть
отменен или проведена еще одна итерация стадия «начало».
Проектирование (Elaboration)
В результате выполнения этой стадии на основе требований и
рисков проекта создается основа архитектуры системы. Проектирование
может занимать до двух-трех итераций или быть полностью
пропущенным (если в проекте используется архитектура существующей
системы без изменений). Целями этой фазы являются:
 детальное описание большей части прецедентов использования;
 создание оттестированной (при помощи архитектурно значимых
прецедентов использования) базовой архитектуры;
 снижение основных рисков и уточнение бюджета и графика
проекта.
В отличие от каскадной модели, основным результатом этой стадии
является не множество документов со спецификациями, а действующая
система с 20-30% реализованных прецедентов использования [25].
Построение (Construction)
В этой стадии (длящейся от двух до четырех итераций) происходит
разработка окончательного продукта. Вовремя ее выполнения создается
основная часть исходного кода системы и выпускаются промежуточные
демонстрационные прототипы.
33
Внедрение (Transition)
Целями стадии «внедрения» являются проведение бетатестирования и тренингов пользователей, исправление обнаруженных
дефектов, развертывание системы на рабочей площадке, при
необходимости – миграция данных. Кроме того, на этой стадии
выполняются задачи, необходимые для проведения маркетинга и продаж.
Стадия «внедрения» занимает от одной до трех итераций. После ее
завершения проводится анализ результатов выполнения всего проекта:
что можно изменить для улучшения эффективности в будущих проектах.
Рабочий процесс
В терминах RUP участники проектной команды создают так
называемые артефакты (work products), выполняя задачи (tasks) в рамках
определенных ролей (roles). Артефактами являются спецификации,
модели, исходный код и т.п. Задачи разделяются по девяти процессным
областям, называемым дисциплинами (discipline). В RUP определены
шесть инженерных и три вспомогательные дисциплины. В них входят:
 Бизнес-моделирование (Business Modeling) – исследование и
описание существующих бизнес-процессов заказчика, а также
поиск их возможных улучшений.
 Управление требованиями (Requirements Management) –
определение границ проекта, разработка функционального
дизайна будущей системы и его согласование с заказчиком.
 Анализ и проектирование (Analysis and Design) –
проектирование архитектуры системы на основе
функциональных требований и ее развитие на протяжении всего
проекта.
 Реализация (Implementation) – разработка, юнит-тестирование
и интеграция компонентов системы.
 Тестирование (Test) – поиск и отслеживание дефектов в
системе, проверка корректности реализации требований.
 Развертывание (Deployment) – создание дистрибутива,
установка системы, обучение пользователей.
 Управление конфигурациями и изменениями (Configuration
and Change Management) – управление версиями исходного
кода и документации, процесс обработки запросов на изменение
(Change requests).
 Управление проектом (Project Management) – создание
проектной команды, планирование фаз и итераций, управление
бюджетом и рисками.



3.2.2. Microsoft Solutions Framework (MSF)
Данная методология описывает подход и организацию работы при
создании программных продуктов. Подробно про методологию MSF вы
35
можете прочитать в переводе Microsoft Solutions Frameworks for Agile
Software Development, которая входит в поставку Microsoft Team
Foundation Server [23].
3.2.3. Scrum
Scrum предоставляет эмпирический подход к разработке ПО. Этот
процесс быстр, адаптивен, умеет подстраиваться и отличен от каскадной
модели. Scrum основан на повторяющихся циклах, это делает его более
гибким и предсказуемым.
Для начала определим роли, которые участвуют в процессе: Scrum
мастер (Scrum Master), Владелец продукта (Product Owner), Команда
(Team).
Scrum Мастер - самая важная роль в методологии. Scrum Мастер
отвечает за успех Scrum в проекте. Как правило, эту роль в проекте играет
менеджер проекта или лидер команды (Team Leader). Важно
подчеркнуть, что Scrum Мастер не раздает задачи членам команды. В
Scrum команда является самоорганизующейся и самоуправляемой.
Основные обязанности Scrum Мастера таковы:
 создает атмосферу доверия,
 участвует в митингах в качестве фасилитатора - человека,
обеспечивающий успешную групповую коммуникацию
 устраняет препятствия
 делает проблемы и открытые вопросы видимыми
 отвечает за соблюдение практик и процесса в команде
Scrum Мастер отслеживает прогресс команды при помощи Sprint
Backlog, отмечая статус всех задач в спринте. Scrum Мастер может также
помогать заказчику создавать список задач для команды
Product Owner - это человек, отвечающий за разработку продукта.
Как правило представитель заказчика для заказной разработки. Владелец
продукта - это единая точка принятия окончательных решений для
команды в проекте, именно поэтому это всегда один человек, а не группа
или комитет.
Команда (Team) - в методологии Scrum команда является
самоорганизующейся и самоуправляемой. Команда берет на себя
обязательства по выполнению объема работ на спринт перед Владельцем
продукта. Работа команды оценивается как работа единой группы. В
Scrum вклад отдельных членов проектной команды не оценивается, так
как это разваливает самоорганизацию команды.
Размер команды ограничивается размером группы людей,
способных эффективно взаимодействовать лицом к лицу.


3.2.5. Crystal Clear
Легковесная гибкая методология, созданная Алистером
Коуберном, которая предназначена для небольших команд в 6-8 человек
для разработки некритичных бизнес-приложений. Как и все гибкие
методологии, Crystal Clear больше опирается на людей, чем на процессы
38
и артефакты. Crystal Clear использует семь методов/практик, три из
которых являются обязательными:
 частая поставка продукта;
 улучшения через рефлексию;
 личные коммуникации;
 чувство безопасности;
 фокусировка;
 простой доступ к экспертам;
 качественное техническое окружение.
Методология Crystal Clear уступает XP по производительности,
зато максимально проста в использовании. Она требует минимальных
усилий для внедрения, поскольку ориентирована на человеческие
привычки. Считается, что эта методология описывает тот естественный
порядок разработки ПО, который устанавливается в достаточно
квалифицированных коллективах, если в них не занимаются
целенаправленным внедрением другой методологии.
Основные характеристики Crystal Clear:
 итеративная инкрементная разработка;
 автоматическое регрессионное тестирование;
 пользователи привлекаются к активному участию в проекте;
 состав документации определяется участниками проекта;
 как правило, используются средства контроля версий кода.


Вопросы и задания для самоконтроля
1. Что понимается под моделью ЖЦ ПО? Назовите существующие
модели ЖЦ ПО.
2. Чем модель ЖЦ ПО отличается от методологии разработки ПО?
Назовите существующие гибкие методологии разработки ПО.
3. Назовите основные особенности и стадии «Каскадной модели».
4. Назовите основные особенности и стадии «Эволюционной модели».
5. Методология Scrum. Что такое Спринт в рамках методологии
Scrum? Какие группы ролей определены в данной методологии?


Тема 4
КАЧЕСТВО ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ


ом. К числу наиболее распространенных относятся [7]:
Определение 1 (ISO): Качество – это полнота свойств и
характеристик продукта, процесса или услуги, которые обеспечивают
способность удовлетворять заявленным или подразумеваемым
потребностям.
Определение 2 (IEEE): Качество программного обеспечения –
это степень, в которой оно обладает требуемой комбинацией свойств.
Анализ всех составляющих качества должен проводиться с
учетом сфер ответственности заинтересованных сторон, как
внутренних участников исполняемого процесса (in-process stakeholder),
так и пользователей процесса (end-of-process stakeholders).
Очевидно, что управление качеством требует контроля всех
измерений и оценок качества в жизненном цикле ПС (рисунок ).

4.1. Измерение и оценка характеристик качества ПО
41
Программное обеспечение, в зависимости от особенностей
разработки и применения, может представлять программу, программный
комплекс, программное средство или программный продукт (изделие).
Введем и будем в дальнейшем использовать следующие определения.
Качество программного обеспечения – это совокупность
свойств, характеризующих способность программного обеспечения
удовлетворять потребностям пользователя в соответствии с
предназначением.


Управление качеством – это система организационных,
экономических, технологических и правовых мероприятий,
осуществляемых для удовлетворения требований к качеству
программного обеспечения в течение жизненного цикла.
Свойства программы – это особенности, объективно присущие
программе, которые проявляются в ее жизненном цикле (разработке,
применении, сопровождении).
Характеристика программы – это понятие, отражающее
проявление отдельного измеримого фактора присущего программе
свойства. Иначе говоря, характеристика – это проявляемый и измеримый
атрибут свойства.

Система измерений характеристик программного обеспечения –
это совокупность измеряемых характеристик, единиц измерения,
измерительных шкал и связей, установленных между ними. Если между
измеряемыми характеристиками установлены иерархические связи,
систему измерений называют иерархической, в противном случае –
одноранговой.
Измерительная шкала устанавливает границы (диапазон) и
точность измерений характеристик свойств в установленных единицах.
Результаты измерений в избранной измерительной шкале
позволяют обнаружить сходство и различие в свойствах программного
обеспечения с целью последующей оценки и классификации.
Применительно к ПО используют главным образом следующие
известные виды измерительных шкал: номинальные (категорийные),
порядковые, интервальные.
Номинальная (категорийная) шкала фиксирует наличие или
отсутствие некоторой характеристики свойства без учета градаций и
позволяет классифицировать программы по этому принципу.
Порядковая шкала фиксирует отношение порядка и позволяет
ранжировать программы относительно некоторого опорного значения
характеристик свойств.
Интервальная шкала фиксирует не только отношение порядка, но
и величину, отличающую одно значение характеристики от другого
(интервал между значениями).
Методы оценки характеристик программного обеспечения делят
на следующие шесть групп: измерительные, регистрационные,
органолептические, расчетные, экспертные, социологические,
традиционные.


Критерий качества – это понятие, признак или численный
показатель, характеризующий оцениваемый фактор качества. Критерий
качества может быть представлен имеющим физический смысл
вычислимым выражением, составленным из характеристик качества,
значением которого является показатель качества. Для вычисления
значения критерия используют одну или несколько метрик.
Метрика – мера количественной оценки качества ПО по
заданному критерию, система или способ измерений качества
программного обеспечения. Метрика содержит один или несколько
оценочных элементов.
Оценочный элемент – измеримая характеристика программного
обеспечения, имеющая численное значение в избранной измерительной
шкале.
Показатель качества – численное значение критерия качества,
определяющее степень, в которой программе присуще определенное
критерием свойство. В соответствии с ГОСТ 15467-79 под показателем
качества следует понимать количественную характеристику одного или
нескольких свойств программной продукции, составляющих ее качество
применительно к определенным условиям ее создания и эксплуатации.
Комплексный показатель качества – показатель качества,
значение которого получают в результате композиции значений других,
в том числе комплексных показателей. Таким образом, качество ПС
многомерное понятие.
Базовое значение показателя качества – это реально достижимое
значение показателя, отражающее современный уровень развития
программного обеспечения.
Совокупность операций, включающих выбор номенклатуры
(состава) показателей качества, определения значений этих показателей
и сравнения их с базовыми значениями, называют оценкой качества
программного обеспечения.
Процесс определения соответствия программного обеспечения
действующему стандарту качества называют сертификацией. Процесс
определения соответствия программного обеспечения предназначению
называют верификацией.

Вопросы и задания для самоконтроля
1. Перечислите основные стандарты, описывающие оценку
качества программного обеспечения.
2. Назовите факторы качества программного обеспечения.
3. Что такое модель зрелости? Особенности.
4. Какие модели качества процессов разработки вы знаете?


Тема 5
МЕТОДЫ ВЫЯВЛЕНИЯ ТРЕБОВАНИЙ К ПО.
УРОВНИ ТРЕБОВАНИЙ. АНАЛИЗ ТРЕБОВАНИЙ К ПО

5.4. Выявление требований
Определение процесса формулирования требований.
Документация этапов выявления, анализа, определения и проверки
требований.

5.7. Проверка требований
Изучение документов с требованиями. Официальная проверка
документирования требований – один из наиболее ценных способов
проверки качества ПО. Соберите небольшую команду, члены которой
представляют различные направления (например, аналитик, клиент,
разработчик и специалист по тестированию}, и тщательно изучите
спецификацию требований к ПО, модель анализа и соответствующую
информацию на предмет недостатков. Также полезно провести в ходе
формулирования требований их неофициальный предварительный
просмотр. И хотя реализовать это на практике непросто, данный прием –
один из самых ценных, так что начинайте внедрять проверку требований
в вашей организации прямо сейчас.
Тестирование требований.

Вопросы и задания для самоконтроля
1. Назовите основные цели, преследуемые при анализе требований
в проектах.
2. Перечислите типы требований.
3. Назовите методы выявления требований.
4. Перечислите задачи, которые решаются на стадии анализа
требований.
5. Аналитик требований. Перечислите основные задачи аналитика
требований. 




Вторая книга:
ПРОЕКТИРОВАНИЕ
ИНФОРМАЦИОННЫХ СИСТЕМ


Основные понятия и классификация информационных систем
1.1 Основные понятия
Целью изучения дисциплины является освоение технологий проектирования информационных систем (ИС), базирующееся на знаниях и умениях в
области вычислительной техники и методов программирования, теории информационных систем и теории надежности, управления и представления
данных, методов и средств обеспечения данных.
В результате изучения дисциплины каждый студент должен:
1) получить знания об этапах проектирования ИС, их содержании;
2) изучить нормативные документы, на которых базируется процесс проектирования ИС;
3) научиться принимать решения о целесообразности создания ИС;
4) научиться формировать требования к ИС;
5) изучить принципы структурного и объектно-ориентированного подхода
к проектированию ИС;
6) получить представления об инструментальных средствах, используемых при проектировании ИС.
Знание дисциплины начинается со знания основных терминологий, используемых в рамках данной предметной области. Самый основополагающий
термин – это информация.
Информация - сведения о тех или иных предметах, явлениях, процессах, событиях.
В процессе своей жизнедеятельности мы постоянно участвуем в информационных процессах, непосредственно связанных с информацией.
Информационные процессы - процессы сбора, обработки, накопления,
хранения, поиска и распространения информации.
В данном аспекте большое значение приобретает понятие документированной информации или документа. В большинстве случаев информация
предоставляется в виде документа – зафиксированной на материальном носителе информации с реквизитами, позволяющими ее идентифицировать (исключая случаи, когда информация поступает не в виде документа, а в виде
каких-либо физических величин).
Информация не только существует, но и обрабатывается.
Информационные технологии - совокупность методов и способов, позволяющих обрабатывать информацию, в том числе с использованием аппаратных и программных средств.


Информационный ресурс – это отдельный документ или массив документов в информационной системе.
Информационная система – организационно упорядоченная совокупность документов (их массивов) и информационных технологий, в том числе
с использованием средств вычислительной техники и связи, реализующих
информационные процессы.

Автоматизированная информационная система (АИС) – информационная система, в которой представление, хранение и обработка информации
осуществляется с помощью вычислительной техники

1.2 Состав ИС
В состав ИС входит комплекс средств автоматизации или программнотехническая часть (КСА)



1.3 Классификация ИС
ИС можно классифицировать по следующим критериям:
1. По сложности создания и сопровождения.
2. По концептуальной модели использования (целевое назначение системы).
3. По характеру представления и логической организации хранимой
информации (как организована база данных).
4. По способу реализации БД (как реализована база данных).
Сложность создания и сопровождения. Специфика решаемых ИС задач,
сложность их создания, сопровождения и время жизни ИС позволяют разделить их на три класса.
1. Малые.
2. Средние.
3. Крупные – корпоративные ИС (КИС).
Основные признаки малых ИС: короткий жизненный цикл, ориентация
на массовое использование, невысокая цена, однородность аппаратного и
программного обеспечения, сопровождение разработчиком для модификаций.
8
Для средних ИС характерны: более длительный жизненный цикл, наличие аналитической обработки данных, администрирование штатом сотрудников, наличие средств обеспечения безопасности.


Лекция 2 Жизненный цикл информационных систем
Жизненный цикл информационных систем


Жизненный цикл автоматизированной системы – это совокупность
взаимосвязанных процессов создания и последовательного изменения состояния ИС

Лекция 3 Этапы жизненного цикла автоматизированных систем и программного обеспечения
Этапы жизненного цикла автоматизированных систем и программного обеспечения
3.1 Взаимосвязь этапов ЖЦПО и ЖЦ системы

Модель жизненного цикла – структура, состоящая из процессов, работ и
задач, включающих в себя разработку, эксплуатацию, и сопровождение программного продукта, охватывающая жизнь системы от установления требований к ней до прекращения ее использования

Лекция 3 Этапы жизненного цикла автоматизированных систем и программного обеспечения
Этапы жизненного цикла автоматизированных систем и программного обеспечения
3.1 Взаимосвязь этапов ЖЦПО и ЖЦ системы
Этапы ЖЦПО:
1) анализ требований - совмещается с формированиями требований, разработкой концепции АС и техническим заданием (1, 2, 3);
2) проектирование - совмещается с ЭП, ТП (4, 5);
3) кодирование (программирование) и тестирование - совмещается с РД
(6);
4) внедрение - совмещается с вводом в действие (7);
5) сопровождение - совмещается с сопровождением (8)

3.2 Назначение этапов ЖЦ
Стратегия – это детальное обследование условий проектирования и
задач системы. Основная цель – оценка реального объема проектирования,
целей и задач проекта. 

Этап «Кодирование» заключается в написании программных кодов по
спецификациям программных модулей.
Этап «Тестирование» заключается в проверке и отладке функционирования системы.



функциональное тестирование – базовое тестирование, состоит в проверке (контроле) функциональности операций на единственном экземпляре приложения архитектуры клиент/сервера;
- конфигурационное тестирование – тестирование приложения, которое
охватывает клиентскую и серверную части приложения во всех комбинациях между платформами клиента и сервера;
- конкурентное тестирование – тестирование двух и более клиентов, использующих один сервер. Это тестирование – разновидность функционального, когда проверяется способность сервера одновременно обслуживать двух и более клиентов.
- стрессовое тестирование – тестирование на большом числе транзакций и позволяет обнаружить ошибки в исходной реализации в динамике, выполняя одну или множество команд продолжительное время;
- тестирование загрузки – тестирование для верифицирования при работе большого числа конкурирующих клиентов и предназначено для обнаружения взаимных блокировок и проблем с очередями;
- тестирование эффективности спроектированной системы – тестирование для получения количественных характеристик системы с учетом
реального окружения системы (например, 500 пользователей на один
сервер базы данных);
- регрессионное тестирование – тестирование степени независимости и
сохранения работоспособности той части системы, которая не подверглась модификации.



Лекция 5 Этап «Анализ»
Этап «Анализ»
5.1 Основные принципы и методы структурного анализа
Фаза анализа – основополагающая. Ошибки этой фазы имеют самые
тяжелые последствия.
Модель предметной области – это представление понятий, выраженных в терминах предметной области задачи
Анализ это очень широкое понятие, которое в свою очередь можно поделить на две разновидности:
1) структурный системный анализ;
2) объектно-ориентированный анализ.
Структурный анализ – это исследование системы, которое начинается
с ее общего обзора и затем детализируется, приобретая иерархическую
структуру со все большим числом уровней. Структурный подход не обеспечивает возможность создания предельно сложных систем (неэффективен в
объектно-ориентированных языках программирования (ООЯП))
Объектно-ориентированный анализ основан на объектах и их взаимодействии между собой. Достоинство – объектно-ориентированные системы
более гибкие и лучше развиваются.
Одновременно двумя способами проектировать систему нельзя.
Для проведения структурного анализа принято использовать методологии, базирующиеся на наборе основополагающих методов, так называемых
структурных.
Методология – это совокупность методов, применяемых в ЖЦ системы.
Методология включает руководящие указания для оценки и выбора проекта,
определяет шаги работы и последовательность применения методов для достижения поставленной цели.
Метод – это последовательный процесс создания моделей, которые
описывают вполне определенными средствами различные стороны разрабатываемой программной системы.

5.2 Методологии структурного анализа и проектирования

1. По отношению к школам - Software Engineering (SE) и Information
Engineering (IE).
2. По порядку построения модели - процедурно-ориентированные, ориентированные на данные, информационно-ориентированные.
3. По типу целевых систем - для систем реального времени (СРВ) и для
информационных систем (ИС).

Лекция 6 Функциональные модели
Функциональные модели

Методология SADT – это совокупность методов, правил и процедур,
предназначенных для функционального моделирования предметной области.
Активностная модель – это совокупность диаграмм, текста и глоссария. Диаграммы – главные компоненты модели.


Процесс - преобразование входных потоков данных в выходные в соответствии с действием, задаваемым именем процесса.
Накопитель данных может быть реализован физически в виде микрофиши, ящика в картотеке, таблицы в оперативной памяти, файла на магнитном носителе.
Накопитель данных идентифицируется буквой «D» или «БД» и произвольным числом. Имя накопителя должно отображать его содержание. Имя
хранилища - имя существительное.
Накопитель данных в общем случае является прообразом будущей базы
данных и описание хранящихся в нем данных должно быть увязано с информационной моделью.
Поток данных определяет информацию, передаваемую через некоторое
соединение от источника к приемнику. Реальный поток данных может быть
информацией, передаваемой по кабелю между двумя устройствами, пересылаемыми по почте письмами, магнитными лентами или дискетами, переносимыми с одного компьютера на другой.
Поток данных на диаграмме изображается стрелкой, которая показывает направление потока. Каждый поток данных имеет имя, отражающее его
содержание.

Лекция 7 Функциональные модели
Функциональные модели

7.2 Словарь данных
Недостатком диаграмм данных является то, что они не всегда показывают, какая информация преобразуется процессами и как она изменяется. Задача описания информации, преобразуемой процессами, реализуется в словаре данных.
Словарь данных – это определенным образом организованный список
всех элементов данных системы с их точными определениями. Это дает всем
проектировщикам возможность иметь представление о входных и выходных
потоках и хранилищах данных.
Словарь данных - «метабаза», в которой хранится информация о базе
данных системы. Его основная задача – документирование данных, а также
37
однозначное толкование элементов данных, управление данными на всех
этапах разработки и эффективное взаимодействие между разработчиками.

Методы задания спецификация процессов
Если нет необходимости в дальнейшей детализации процесса с помощью DFD, то используют спецификацию процесса. Спецификация процесса –
это алгоритм описания задачи, выполняемой процессом. Множество всех СП
представляет собой спецификацию системы.
Классификация методов задания СП
1. Текстовое описание.
2. Структурированный естественный язык.
3. Таблица решений.
4. Дерево решений.
5. Визуальный язык.
6. Язык программирования


Лекция 10 Структурное проектирование
Структурное проектирование

Структурные карты - инструмент для демонстрации структуры системы и составляющих ее программных модулей, а также их связей друг с
другом.



Лекция 11 Характеристики модели реализации
Характеристики модели реализации

1. Чтобы модули были как можно более независимы (критерий сцепления - coupling).
2. Чтобы каждый модуль выполнял единственную (связанную с общей
задачей) функцию (критерий связности - cohesion).

Лекция 12 Понятие бизнес-процесса
Понятие бизнес-процесса
12.1 Понятие бизнес-процесса

Для каждого бизнес-процесса дается ответ на вопросы:
1. Что в него поступает на входе?
2. Результат работы бизнес-процесса?
55
3. Чем он руководствуется?
4. Кто его выполняет?
5. Какие функции выполняются в рамках бизнес-процесса.


Лекция 14 Технология внедрения CASE-средств
Технология внедрения CASE-средств


14.1 Определение потребностей в CASE-средствах

Анализ возможностей организации в отношении ее технологической
базы, персонала и используемого ПО, как правило, может быть формальным
и неформальным. Формальный – через модели зрелости технологических
процессов предприятия CММ и согласно стандартам ИСО 9000


Лекция 15 Оценка качества разработанной программной продукции
Оценка качества разработанной программной продукции
15.1 Качество ПО и его характеристики


Качество ПО – это весь объем признаков и характеристик программной
продукции, который относится к их способности удовлетворять установленным или предполагаемым потребностям пользователя.
Качество оценивается с помощью критериев оценки качества ПО.
Критерий оценки качества ПО – это набор определенных и задокументированных правил и условий, которые используются для принятия решения
о приемлемости общего качества конкретной программной продукции

Комплексные показатели:
- понятность;
- обучаемость;
- привлекательность;
- простота использования.

Комплексные показатели:
- анализируемость;
- изменяемость;
- устойчивость;
- тестируемость.



15.2 Модель процесса оценивания качества

Примеры метрик:

- полнота реализации функций. Используется для измерения пригодности;
- корректность реализации функций. Используется для измерения пригодности;
- отношение числа обнаруженных дефектов к прогнозируемому. Используется для определения зрелости;
- отношение числа проведенных тестов к общему их числу. Используется
для определения зрелости;
- отношение числа доступных проектных документов к указанному в их
списке. Используется для измерения анализируемости.


Лекция 16 Объектно-ориентированный подход к разработке программного обеспечения
Объектно-ориентированный подход к разработке программного обеспечения

16.1 Возникновение объектно-ориентированного подхода

ООП – это альтернатива алгоритмической декомпозиции, которая не
делит задачу на последовательность шагов – как ее решить, а представляет
задачу в виде взаимодействия объектов, принимающих в ней участие и взятых из словаря предметной области. Каждый объект обеспечивает некоторое
поведение, мы можем его попросить что-то сделать. Объект – моделирует
предмет из реального мира.
Объектно-ориентированный метод разработки ПО произошел на основе
развития всех предыдущих методов и вылился в создании объектноориентированных языков программирования, которые представляют собой не
более чем инструмент для написания объектно-ориентированных программ.
Наиболее распространены среди них:
- C++;
- Java;
- Смолтолк (Smalltalk).

Инкапсуляция – это обеспечиваемое объектами сокрытие информации.
Те операции, которые может выполнять объект, – это его интерфейс.
Интерфейс – описание того, как объект взаимодействует с окружающим миром.


Лекция 17 Классы
Классы
17.1 Понятие класса
В любой системе, как правило, функционирует достаточно большое количество объектов, многие из которых похожи друг на друга – однотипны.
Однотипные объекты объединяются в классы.
Класс – это шаблон создания объектов.
Все объекты одного и того же класса обладают одинаковым интерфейсом и реализуют его одинаково. Их отличие может быть только в текущем
состоянии. Индивидуальные объекты – это экземпляры класса.
Экземпляр – это объект, принадлежащий некоторому классу.

Наследование – это отношение между классами, при котором один
класс разделяет структуру или поведение одного или нескольких других
классов. Существующий класс называется при этом суперклассом, а производный подклассом или производным классом.
Механизм наследования позволяет выделить общие части классов. Каким образом проводить наследование и создавать иерархию классов, какие
классы выделять, решает сам разработчик.
Иерархия классов – это описание отношений наследования между классами.
Некоторые классы, которые просто объединяют общие характеристики
других классов, но по которым невозможно создать объекты, называются абстрактными.

17.2 Виды отношений между классами
Существуют следующие основные отношения между классами:
1) ассоциация;
2) наследование;
3) использование;
4) агрегация.
Ассоциация – двухсторонняя связь между объектами разных классов.
Например, имеется объект преподаватель и объект студент

Основные виды диаграмм
19.1 Диаграмма прецедентов USE-CASE диаграмма
Концептуальная модель выражается в виде диаграммы прецедентов
(вариантов использования). Для составления вариантов использования прецедентов рекомендуется рассмотреть все внешние по отношению к системе
события, на которые система должна реагировать. Существуют различные
форматы описания прецедентов. В любом случае это - некоторый повествовательный документ о поведении системы. В этом документе должны быть
отражены такие моменты, как:
- основные исполнители, заинтересованные лица и их требования;
- результаты работы системы;
- основной процесс в системе (успешный);
- альтернативы – отклонения от основного процесса;
- специальные требования;
- список технологий и типов данных.


Лекция 20 Архитектура информационных систем
Архитектура информационных систем
20.1 Многократное использование программных систем


На сервере могут запускаться также триггеры и хранимые процедуры.
Триггер – программа, которая позволяет поддерживать целостность таблиц
базы данных.
